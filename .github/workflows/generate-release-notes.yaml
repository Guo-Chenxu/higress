name: Generate Release Notes

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: ~

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    env:
      DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
      MODEL_NAME: ${{ secrets.MODEL_NAME }}
      MODEL_SERVER: ${{ secrets.MODEL_SERVER }}
      RELEASE_VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout Higress code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Clone GitHub MCP Server
        run: |
          git clone https://github.com/github/github-mcp-server.git
          cd github-mcp-server
          go build -o ../github-mcp-server ./cmd/github-mcp-server
          cd ..
          chmod u+x github-mcp-server

      - name: Setup Python with uv
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Clone Higress Report Agent
        run: |
          git clone https://github.com/higress-group/higress-report-agent.git
          mv github-mcp-serve higress-report-agent/

      - name: Create Release Report Script
        run: |
          cat > generate_release_report.sh << 'EOF'
          #!/bin/bash
          # Script to generate release notes for Higress projects

          echo "Fetching GitHub generated release notes for ${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}..."
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_PERSONAL_ACCESS_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/releases/generate-notes" \
            -d "{\"tag_name\":\"${RELEASE_VERSION}\"}" \
            -o github_notes.json

          echo "Extracting PR numbers from ${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME} release notes..."
          PR_NUMS=$(cat github_notes.json | grep -o "https://github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/pull/[0-9]*" | grep -o "[0-9]*$" | sort -n | uniq | tr '\n' ',')
          PR_NUMS=${PR_NUMS%,}
          rm github_notes.json

          echo "Extracted PR numbers for ${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}: ${PR_NUMS}"

          if [ -n "$PR_NUMS" ]; then
            echo "Generating detailed release notes for ${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}..."
            cd higress-report-agent
            pip install uv
            uv sync
            uv run report_main.py --mode 2 --choice 2 --pr_nums ${PR_NUMS}
            cp report.md ../
            cp report.EN.md ../
            cd ..
          else
            echo "No PRs found for ${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}, creating empty report files"
            echo "" >report.md
            echo "" >report.EN.md
          fi

          echo "Creating release notes directory for version ${RELEASE_VERSION}..."
          mkdir -p release-notes/${RELEASE_VERSION}

          echo "# ${REPORT_TITLE}" >>release-notes/${RELEASE_VERSION}/README_ZH.md
          sed 's/# Release Notes//' report.md >>release-notes/${RELEASE_VERSION}/README_ZH.md

          echo "# ${REPORT_TITLE}" >>release-notes/${RELEASE_VERSION}/README.md
          sed 's/# Release Notes//' report.EN.md >>release-notes/${RELEASE_VERSION}/README.md

          rm report.md
          rm report.EN.md
          echo "${REPORT_TITLE} release notes saved to release-notes/${RELEASE_VERSION}/"
          EOF
          chmod +x generate_release_report.sh

      - name: Generate Release Notes for Higress Core
        env:
          GITHUB_REPO_OWNER: alibaba
          GITHUB_REPO_NAME: higress
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN_HIGRESS }}
          REPORT_TITLE: Higress Core
        run: |
          bash generate_release_report.sh

      - name: Generate Release Notes for Higress Console
        env:
          GITHUB_REPO_OWNER: higress-group
          GITHUB_REPO_NAME: higress-console
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN_HIGRESS_CONSOLE }}
          REPORT_TITLE: Higress Console
        run: |
          bash generate_release_report.sh

      - name: Clean
        run: |
          rm generate_release_report.sh
          rm -rf higress-report-agent
          rm -rf github-mcp-server

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.TOKEN }}
          commit-message: "Add release notes"
          branch: add-release-notes
          title: "Add release notes"
          body: |
            This PR adds release notes.

            - Automatically generated by GitHub Actions
          labels: release notes, automated
          base: main
